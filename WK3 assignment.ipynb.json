{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "# All requested packages already installed.\n",
      "\n",
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "# All requested packages already installed.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np #handle data in a vectorized manner\n",
    "import pandas as pd #data analsysis\n",
    "pd.set_option(\"display.max_columns\", None)\n",
    "pd.set_option(\"display.max_rows\", None)\n",
    "import matplotlib.pyplot as plt# generate figure\n",
    "import requests # library to handle requests\n",
    "import json #library to handle JSON files\n",
    "import folium #map rendering library\n",
    "!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\n",
    "import xml\n",
    "import matplotlib.cm as cm # Matplotlib and associated plotting modules\n",
    "import matplotlib.colors as colors # Matplotlib and associated plotting modules\n",
    "!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab\n",
    "from geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n",
    "from bs4 import BeautifulSoup #for webscraping import Beautiful Soup \n",
    "from pandas.io.json import json_normalize # tranform Json file into a pandas dataframe\n",
    "from sklearn.cluster import KMeans # import k-means from clustering stage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the data from Wikipedia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M\n",
      "200\n",
      "{'Date': 'Wed, 17 Jun 2020 16:48:47 GMT', 'Vary': 'Accept-Encoding,Cookie,Authorization', 'Server': 'ATS/8.0.7', 'X-Content-Type-Options': 'nosniff', 'P3p': 'CP=\"See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P for more info.\"', 'Content-Language': 'en', 'Last-Modified': 'Sun, 14 Jun 2020 17:04:41 GMT', 'Content-Type': 'text/html; charset=UTF-8', 'Content-Encoding': 'gzip', 'Age': '5033', 'X-Cache': 'cp3064 hit, cp3058 hit/19', 'X-Cache-Status': 'hit-front', 'Server-Timing': 'cache;desc=\"hit-front\"', 'Strict-Transport-Security': 'max-age=106384710; includeSubDomains; preload', 'Set-Cookie': 'WMF-Last-Access=17-Jun-2020;Path=/;HttpOnly;secure;Expires=Sun, 19 Jul 2020 12:00:00 GMT, WMF-Last-Access-Global=17-Jun-2020;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Sun, 19 Jul 2020 12:00:00 GMT, GeoIP=GB:ENG:Walthamstow:51.59:-0.02:v4; Path=/; secure; Domain=.wikipedia.org', 'X-Client-IP': '82.15.178.91', 'Cache-Control': 'private, s-maxage=0, max-age=0, must-revalidate', 'Accept-Ranges': 'bytes', 'Content-Length': '13149', 'Connection': 'keep-alive'}\n"
     ]
    }
   ],
   "source": [
    "url='https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'\n",
    "result=requests.get(url) #request data\n",
    "soup=BeautifulSoup(result.content, 'html.parser') # parse data from the url into a beautifulsoup object\n",
    "print(url)\n",
    "print(result.status_code)\n",
    "print(result.headers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "post_data=soup.find('table')\n",
    "fields=post_data.find_all('td')\n",
    "# create three lists to store table data\n",
    "postcode =[]\n",
    "borough =[]\n",
    "neighbourhood =[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M1A</td>\n",
       "      <td>Not assigned</td>\n",
       "      <td>Not assigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>M2A</td>\n",
       "      <td>Not assigned</td>\n",
       "      <td>Not assigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park, Harbourfront</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode           Borough               Neighborhood\n",
       "0      M1A      Not assigned               Not assigned\n",
       "1      M2A      Not assigned               Not assigned\n",
       "2      M3A        North York                  Parkwoods\n",
       "3      M4A        North York           Victoria Village\n",
       "4      M5A  Downtown Toronto  Regent Park, Harbourfront"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# append the data into the respective lists\n",
    "for i in range(0, len(fields), 3):\n",
    "    postcode.append(fields[i].text.strip())\n",
    "    borough.append(fields[i+1].text.strip())\n",
    "    neighbourhood.append(fields[i+2].text.strip())\n",
    "    \n",
    "df_post=pd.DataFrame(data=[postcode,borough,neighbourhood]).transpose()\n",
    "df_post.columns=['Postcode','Borough','Neighborhood']\n",
    "df_post.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(720, 3)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_post.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "delete 'Not assigned' value in Borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park, Harbourfront</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>M6A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Lawrence Manor, Lawrence Heights</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park, Ontario Provincial Government</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode           Borough                                 Neighborhood\n",
       "0      M3A        North York                                    Parkwoods\n",
       "1      M4A        North York                             Victoria Village\n",
       "2      M5A  Downtown Toronto                    Regent Park, Harbourfront\n",
       "3      M6A        North York             Lawrence Manor, Lawrence Heights\n",
       "4      M7A  Downtown Toronto  Queen's Park, Ontario Provincial Government"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_postcode=df_post[df_post.Borough !='Not assigned'].reset_index(drop=True)\n",
    "df_postcode.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Group neighborhood in the same borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M1B</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>M1C</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Rouge Hill, Port Union, Highland Creek,Rouge H...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M1E</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Guildwood, Morningside, West Hill,Guildwood, M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>M1G</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Woburn,Woburn,Woburn,Woburn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M1H</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>M1J</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Scarborough Village,Scarborough Village,Scarbo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>M1K</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Kennedy Park, Ionview, East Birchmount Park,Ke...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>M1L</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Golden Mile, Clairlea, Oakridge,Golden Mile, C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>M1M</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Cliffside, Cliffcrest, Scarborough Village Wes...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>M1N</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Birch Cliff, Cliffside West,Birch Cliff, Cliff...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>M1P</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Dorset Park, Wexford Heights, Scarborough Town...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>M1R</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Wexford, Maryvale,Wexford, Maryvale,Wexford, M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>M1S</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Agincourt,Agincourt,Agincourt,Agincourt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>M1T</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Clarks Corners, Tam O'Shanter, Sullivan,Clarks...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>M1V</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Milliken, Agincourt North, Steeles East, L'Amo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>M1W</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Steeles West, L'Amoreaux West,Steeles West, L'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>M1X</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Upper Rouge,Upper Rouge,Upper Rouge,Upper Rouge</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>M2H</td>\n",
       "      <td>North York</td>\n",
       "      <td>Hillcrest Village,Hillcrest Village,Hillcrest ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>M2J</td>\n",
       "      <td>North York</td>\n",
       "      <td>Fairview, Henry Farm, Oriole,Fairview, Henry F...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>M2K</td>\n",
       "      <td>North York</td>\n",
       "      <td>Bayview Village,Bayview Village,Bayview Villag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>M2L</td>\n",
       "      <td>North York</td>\n",
       "      <td>York Mills, Silver Hills,York Mills, Silver Hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>M2M</td>\n",
       "      <td>North York</td>\n",
       "      <td>Willowdale, Newtonbrook,Willowdale, Newtonbroo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>M2N</td>\n",
       "      <td>North York</td>\n",
       "      <td>Willowdale, Willowdale East,Willowdale, Willow...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>M2P</td>\n",
       "      <td>North York</td>\n",
       "      <td>York Mills West,York Mills West,York Mills Wes...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>M2R</td>\n",
       "      <td>North York</td>\n",
       "      <td>Willowdale, Willowdale West,Willowdale, Willow...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods,Parkwoods,Parkwoods,Parkwoods</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>M3B</td>\n",
       "      <td>North York</td>\n",
       "      <td>Don Mills,Don Mills,Don Mills,Don Mills</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27</td>\n",
       "      <td>M3C</td>\n",
       "      <td>North York</td>\n",
       "      <td>Don Mills,Don Mills,Don Mills,Don Mills</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>M3H</td>\n",
       "      <td>North York</td>\n",
       "      <td>Bathurst Manor, Wilson Heights, Downsview Nort...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29</td>\n",
       "      <td>M3J</td>\n",
       "      <td>North York</td>\n",
       "      <td>Northwood Park, York University,Northwood Park...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>M3K</td>\n",
       "      <td>North York</td>\n",
       "      <td>Downsview,Downsview,Downsview,Downsview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>M3L</td>\n",
       "      <td>North York</td>\n",
       "      <td>Downsview,Downsview,Downsview,Downsview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>M3M</td>\n",
       "      <td>North York</td>\n",
       "      <td>Downsview,Downsview,Downsview,Downsview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>M3N</td>\n",
       "      <td>North York</td>\n",
       "      <td>Downsview,Downsview,Downsview,Downsview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village,Victoria Village,Victoria Vil...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>M4B</td>\n",
       "      <td>East York</td>\n",
       "      <td>Parkview Hill, Woodbine Gardens,Parkview Hill,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36</td>\n",
       "      <td>M4C</td>\n",
       "      <td>East York</td>\n",
       "      <td>Woodbine Heights,Woodbine Heights,Woodbine Hei...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>M4E</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>The Beaches,The Beaches,The Beaches,The Beaches</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>M4G</td>\n",
       "      <td>East York</td>\n",
       "      <td>Leaside,Leaside,Leaside,Leaside</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>M4H</td>\n",
       "      <td>East York</td>\n",
       "      <td>Thorncliffe Park,Thorncliffe Park,Thorncliffe ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>M4J</td>\n",
       "      <td>East York</td>\n",
       "      <td>East Toronto, Broadview North (Old East York),...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>M4K</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>The Danforth West, Riverdale,The Danforth West...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42</td>\n",
       "      <td>M4L</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>India Bazaar, The Beaches West,India Bazaar, T...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>43</td>\n",
       "      <td>M4M</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>Studio District,Studio District,Studio Distric...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>M4N</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Lawrence Park,Lawrence Park,Lawrence Park,Lawr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>M4P</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Davisville North,Davisville North,Davisville N...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>46</td>\n",
       "      <td>M4R</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>North Toronto West,  Lawrence Park,North Toron...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>47</td>\n",
       "      <td>M4S</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Davisville,Davisville,Davisville,Davisville</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48</td>\n",
       "      <td>M4T</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Moore Park, Summerhill East,Moore Park, Summer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>49</td>\n",
       "      <td>M4V</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Summerhill West, Rathnelly, South Hill, Forest...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50</td>\n",
       "      <td>M4W</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Rosedale,Rosedale,Rosedale,Rosedale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>51</td>\n",
       "      <td>M4X</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>St. James Town, Cabbagetown,St. James Town, Ca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>52</td>\n",
       "      <td>M4Y</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Church and Wellesley,Church and Wellesley,Chur...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53</td>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park, Harbourfront,Regent Park, Harbour...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54</td>\n",
       "      <td>M5B</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Garden District, Ryerson,Garden District, Ryer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55</td>\n",
       "      <td>M5C</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>St. James Town,St. James Town,St. James Town,S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56</td>\n",
       "      <td>M5E</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Berczy Park,Berczy Park,Berczy Park,Berczy Park</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57</td>\n",
       "      <td>M5G</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Central Bay Street,Central Bay Street,Central ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58</td>\n",
       "      <td>M5H</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Richmond, Adelaide, King,Richmond, Adelaide, K...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>59</td>\n",
       "      <td>M5J</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Harbourfront East, Union Station, Toronto Isla...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60</td>\n",
       "      <td>M5K</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Toronto Dominion Centre, Design Exchange,Toron...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>61</td>\n",
       "      <td>M5L</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Commerce Court, Victoria Hotel,Commerce Court,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>62</td>\n",
       "      <td>M5M</td>\n",
       "      <td>North York</td>\n",
       "      <td>Bedford Park, Lawrence Manor East,Bedford Park...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>63</td>\n",
       "      <td>M5N</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Roselawn,Roselawn,Roselawn,Roselawn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64</td>\n",
       "      <td>M5P</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>Forest Hill North &amp; West, Forest Hill Road Par...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65</td>\n",
       "      <td>M5R</td>\n",
       "      <td>Central Toronto</td>\n",
       "      <td>The Annex, North Midtown, Yorkville,The Annex,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>M5S</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>University of Toronto, Harbord,University of T...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67</td>\n",
       "      <td>M5T</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Kensington Market, Chinatown, Grange Park,Kens...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>M5V</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>CN Tower, King and Spadina, Railway Lands, Har...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>69</td>\n",
       "      <td>M5W</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Stn A PO Boxes,Stn A PO Boxes,Stn A PO Boxes,S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70</td>\n",
       "      <td>M5X</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>First Canadian Place, Underground city,First C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>71</td>\n",
       "      <td>M6A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Lawrence Manor, Lawrence Heights,Lawrence Mano...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>72</td>\n",
       "      <td>M6B</td>\n",
       "      <td>North York</td>\n",
       "      <td>Glencairn,Glencairn,Glencairn,Glencairn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>73</td>\n",
       "      <td>M6C</td>\n",
       "      <td>York</td>\n",
       "      <td>Humewood-Cedarvale,Humewood-Cedarvale,Humewood...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74</td>\n",
       "      <td>M6E</td>\n",
       "      <td>York</td>\n",
       "      <td>Caledonia-Fairbanks,Caledonia-Fairbanks,Caledo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>M6G</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Christie,Christie,Christie,Christie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>76</td>\n",
       "      <td>M6H</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>Dufferin, Dovercourt Village,Dufferin, Doverco...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>M6J</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>Little Portugal, Trinity,Little Portugal, Trin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>M6K</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>Brockton, Parkdale Village, Exhibition Place,B...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>79</td>\n",
       "      <td>M6L</td>\n",
       "      <td>North York</td>\n",
       "      <td>North Park, Maple Leaf Park, Upwood Park,North...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>M6M</td>\n",
       "      <td>York</td>\n",
       "      <td>Del Ray, Mount Dennis, Keelsdale and Silvertho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>81</td>\n",
       "      <td>M6N</td>\n",
       "      <td>York</td>\n",
       "      <td>Runnymede, The Junction North,Runnymede, The J...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>82</td>\n",
       "      <td>M6P</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>High Park, The Junction South,High Park, The J...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>83</td>\n",
       "      <td>M6R</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>Parkdale, Roncesvalles,Parkdale, Roncesvalles,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>84</td>\n",
       "      <td>M6S</td>\n",
       "      <td>West Toronto</td>\n",
       "      <td>Runnymede, Swansea,Runnymede, Swansea,Runnymed...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>85</td>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park, Ontario Provincial Government,Qu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>86</td>\n",
       "      <td>M7R</td>\n",
       "      <td>Mississauga</td>\n",
       "      <td>Canada Post Gateway Processing Centre,Canada P...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>87</td>\n",
       "      <td>M7Y</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>Business reply mail Processing Centre, South C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>88</td>\n",
       "      <td>M8V</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>New Toronto, Mimico South, Humber Bay Shores,N...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>89</td>\n",
       "      <td>M8W</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Alderwood, Long Branch,Alderwood, Long Branch,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90</td>\n",
       "      <td>M8X</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>The Kingsway, Montgomery Road, Old Mill North,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>91</td>\n",
       "      <td>M8Y</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Old Mill South, King's Mill Park, Sunnylea, Hu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>92</td>\n",
       "      <td>M8Z</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Mimico NW, The Queensway West, South of Bloor,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>93</td>\n",
       "      <td>M9A</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Islington Avenue, Humber Valley Village,Isling...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>M9B</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>West Deane Park, Princess Gardens, Martin Grov...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>95</td>\n",
       "      <td>M9C</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Eringate, Bloordale Gardens, Old Burnhamthorpe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>96</td>\n",
       "      <td>M9L</td>\n",
       "      <td>North York</td>\n",
       "      <td>Humber Summit,Humber Summit,Humber Summit,Humb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>M9M</td>\n",
       "      <td>North York</td>\n",
       "      <td>Humberlea, Emery,Humberlea, Emery,Humberlea, E...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>98</td>\n",
       "      <td>M9N</td>\n",
       "      <td>York</td>\n",
       "      <td>Weston,Weston,Weston,Weston</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>M9P</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Westmount,Westmount,Westmount,Westmount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>100</td>\n",
       "      <td>M9R</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Kingsview Village, St. Phillips, Martin Grove ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>101</td>\n",
       "      <td>M9V</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>South Steeles, Silverstone, Humbergate, Jamest...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>102</td>\n",
       "      <td>M9W</td>\n",
       "      <td>Etobicoke</td>\n",
       "      <td>Northwest, West Humber - Clairville,Northwest,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Postcode           Borough  \\\n",
       "0        M1B       Scarborough   \n",
       "1        M1C       Scarborough   \n",
       "2        M1E       Scarborough   \n",
       "3        M1G       Scarborough   \n",
       "4        M1H       Scarborough   \n",
       "5        M1J       Scarborough   \n",
       "6        M1K       Scarborough   \n",
       "7        M1L       Scarborough   \n",
       "8        M1M       Scarborough   \n",
       "9        M1N       Scarborough   \n",
       "10       M1P       Scarborough   \n",
       "11       M1R       Scarborough   \n",
       "12       M1S       Scarborough   \n",
       "13       M1T       Scarborough   \n",
       "14       M1V       Scarborough   \n",
       "15       M1W       Scarborough   \n",
       "16       M1X       Scarborough   \n",
       "17       M2H        North York   \n",
       "18       M2J        North York   \n",
       "19       M2K        North York   \n",
       "20       M2L        North York   \n",
       "21       M2M        North York   \n",
       "22       M2N        North York   \n",
       "23       M2P        North York   \n",
       "24       M2R        North York   \n",
       "25       M3A        North York   \n",
       "26       M3B        North York   \n",
       "27       M3C        North York   \n",
       "28       M3H        North York   \n",
       "29       M3J        North York   \n",
       "30       M3K        North York   \n",
       "31       M3L        North York   \n",
       "32       M3M        North York   \n",
       "33       M3N        North York   \n",
       "34       M4A        North York   \n",
       "35       M4B         East York   \n",
       "36       M4C         East York   \n",
       "37       M4E      East Toronto   \n",
       "38       M4G         East York   \n",
       "39       M4H         East York   \n",
       "40       M4J         East York   \n",
       "41       M4K      East Toronto   \n",
       "42       M4L      East Toronto   \n",
       "43       M4M      East Toronto   \n",
       "44       M4N   Central Toronto   \n",
       "45       M4P   Central Toronto   \n",
       "46       M4R   Central Toronto   \n",
       "47       M4S   Central Toronto   \n",
       "48       M4T   Central Toronto   \n",
       "49       M4V   Central Toronto   \n",
       "50       M4W  Downtown Toronto   \n",
       "51       M4X  Downtown Toronto   \n",
       "52       M4Y  Downtown Toronto   \n",
       "53       M5A  Downtown Toronto   \n",
       "54       M5B  Downtown Toronto   \n",
       "55       M5C  Downtown Toronto   \n",
       "56       M5E  Downtown Toronto   \n",
       "57       M5G  Downtown Toronto   \n",
       "58       M5H  Downtown Toronto   \n",
       "59       M5J  Downtown Toronto   \n",
       "60       M5K  Downtown Toronto   \n",
       "61       M5L  Downtown Toronto   \n",
       "62       M5M        North York   \n",
       "63       M5N   Central Toronto   \n",
       "64       M5P   Central Toronto   \n",
       "65       M5R   Central Toronto   \n",
       "66       M5S  Downtown Toronto   \n",
       "67       M5T  Downtown Toronto   \n",
       "68       M5V  Downtown Toronto   \n",
       "69       M5W  Downtown Toronto   \n",
       "70       M5X  Downtown Toronto   \n",
       "71       M6A        North York   \n",
       "72       M6B        North York   \n",
       "73       M6C              York   \n",
       "74       M6E              York   \n",
       "75       M6G  Downtown Toronto   \n",
       "76       M6H      West Toronto   \n",
       "77       M6J      West Toronto   \n",
       "78       M6K      West Toronto   \n",
       "79       M6L        North York   \n",
       "80       M6M              York   \n",
       "81       M6N              York   \n",
       "82       M6P      West Toronto   \n",
       "83       M6R      West Toronto   \n",
       "84       M6S      West Toronto   \n",
       "85       M7A  Downtown Toronto   \n",
       "86       M7R       Mississauga   \n",
       "87       M7Y      East Toronto   \n",
       "88       M8V         Etobicoke   \n",
       "89       M8W         Etobicoke   \n",
       "90       M8X         Etobicoke   \n",
       "91       M8Y         Etobicoke   \n",
       "92       M8Z         Etobicoke   \n",
       "93       M9A         Etobicoke   \n",
       "94       M9B         Etobicoke   \n",
       "95       M9C         Etobicoke   \n",
       "96       M9L        North York   \n",
       "97       M9M        North York   \n",
       "98       M9N              York   \n",
       "99       M9P         Etobicoke   \n",
       "100      M9R         Etobicoke   \n",
       "101      M9V         Etobicoke   \n",
       "102      M9W         Etobicoke   \n",
       "\n",
       "                                          Neighborhood  \n",
       "0    Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...  \n",
       "1    Rouge Hill, Port Union, Highland Creek,Rouge H...  \n",
       "2    Guildwood, Morningside, West Hill,Guildwood, M...  \n",
       "3                          Woburn,Woburn,Woburn,Woburn  \n",
       "4              Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae  \n",
       "5    Scarborough Village,Scarborough Village,Scarbo...  \n",
       "6    Kennedy Park, Ionview, East Birchmount Park,Ke...  \n",
       "7    Golden Mile, Clairlea, Oakridge,Golden Mile, C...  \n",
       "8    Cliffside, Cliffcrest, Scarborough Village Wes...  \n",
       "9    Birch Cliff, Cliffside West,Birch Cliff, Cliff...  \n",
       "10   Dorset Park, Wexford Heights, Scarborough Town...  \n",
       "11   Wexford, Maryvale,Wexford, Maryvale,Wexford, M...  \n",
       "12             Agincourt,Agincourt,Agincourt,Agincourt  \n",
       "13   Clarks Corners, Tam O'Shanter, Sullivan,Clarks...  \n",
       "14   Milliken, Agincourt North, Steeles East, L'Amo...  \n",
       "15   Steeles West, L'Amoreaux West,Steeles West, L'...  \n",
       "16     Upper Rouge,Upper Rouge,Upper Rouge,Upper Rouge  \n",
       "17   Hillcrest Village,Hillcrest Village,Hillcrest ...  \n",
       "18   Fairview, Henry Farm, Oriole,Fairview, Henry F...  \n",
       "19   Bayview Village,Bayview Village,Bayview Villag...  \n",
       "20   York Mills, Silver Hills,York Mills, Silver Hi...  \n",
       "21   Willowdale, Newtonbrook,Willowdale, Newtonbroo...  \n",
       "22   Willowdale, Willowdale East,Willowdale, Willow...  \n",
       "23   York Mills West,York Mills West,York Mills Wes...  \n",
       "24   Willowdale, Willowdale West,Willowdale, Willow...  \n",
       "25             Parkwoods,Parkwoods,Parkwoods,Parkwoods  \n",
       "26             Don Mills,Don Mills,Don Mills,Don Mills  \n",
       "27             Don Mills,Don Mills,Don Mills,Don Mills  \n",
       "28   Bathurst Manor, Wilson Heights, Downsview Nort...  \n",
       "29   Northwood Park, York University,Northwood Park...  \n",
       "30             Downsview,Downsview,Downsview,Downsview  \n",
       "31             Downsview,Downsview,Downsview,Downsview  \n",
       "32             Downsview,Downsview,Downsview,Downsview  \n",
       "33             Downsview,Downsview,Downsview,Downsview  \n",
       "34   Victoria Village,Victoria Village,Victoria Vil...  \n",
       "35   Parkview Hill, Woodbine Gardens,Parkview Hill,...  \n",
       "36   Woodbine Heights,Woodbine Heights,Woodbine Hei...  \n",
       "37     The Beaches,The Beaches,The Beaches,The Beaches  \n",
       "38                     Leaside,Leaside,Leaside,Leaside  \n",
       "39   Thorncliffe Park,Thorncliffe Park,Thorncliffe ...  \n",
       "40   East Toronto, Broadview North (Old East York),...  \n",
       "41   The Danforth West, Riverdale,The Danforth West...  \n",
       "42   India Bazaar, The Beaches West,India Bazaar, T...  \n",
       "43   Studio District,Studio District,Studio Distric...  \n",
       "44   Lawrence Park,Lawrence Park,Lawrence Park,Lawr...  \n",
       "45   Davisville North,Davisville North,Davisville N...  \n",
       "46   North Toronto West,  Lawrence Park,North Toron...  \n",
       "47         Davisville,Davisville,Davisville,Davisville  \n",
       "48   Moore Park, Summerhill East,Moore Park, Summer...  \n",
       "49   Summerhill West, Rathnelly, South Hill, Forest...  \n",
       "50                 Rosedale,Rosedale,Rosedale,Rosedale  \n",
       "51   St. James Town, Cabbagetown,St. James Town, Ca...  \n",
       "52   Church and Wellesley,Church and Wellesley,Chur...  \n",
       "53   Regent Park, Harbourfront,Regent Park, Harbour...  \n",
       "54   Garden District, Ryerson,Garden District, Ryer...  \n",
       "55   St. James Town,St. James Town,St. James Town,S...  \n",
       "56     Berczy Park,Berczy Park,Berczy Park,Berczy Park  \n",
       "57   Central Bay Street,Central Bay Street,Central ...  \n",
       "58   Richmond, Adelaide, King,Richmond, Adelaide, K...  \n",
       "59   Harbourfront East, Union Station, Toronto Isla...  \n",
       "60   Toronto Dominion Centre, Design Exchange,Toron...  \n",
       "61   Commerce Court, Victoria Hotel,Commerce Court,...  \n",
       "62   Bedford Park, Lawrence Manor East,Bedford Park...  \n",
       "63                 Roselawn,Roselawn,Roselawn,Roselawn  \n",
       "64   Forest Hill North & West, Forest Hill Road Par...  \n",
       "65   The Annex, North Midtown, Yorkville,The Annex,...  \n",
       "66   University of Toronto, Harbord,University of T...  \n",
       "67   Kensington Market, Chinatown, Grange Park,Kens...  \n",
       "68   CN Tower, King and Spadina, Railway Lands, Har...  \n",
       "69   Stn A PO Boxes,Stn A PO Boxes,Stn A PO Boxes,S...  \n",
       "70   First Canadian Place, Underground city,First C...  \n",
       "71   Lawrence Manor, Lawrence Heights,Lawrence Mano...  \n",
       "72             Glencairn,Glencairn,Glencairn,Glencairn  \n",
       "73   Humewood-Cedarvale,Humewood-Cedarvale,Humewood...  \n",
       "74   Caledonia-Fairbanks,Caledonia-Fairbanks,Caledo...  \n",
       "75                 Christie,Christie,Christie,Christie  \n",
       "76   Dufferin, Dovercourt Village,Dufferin, Doverco...  \n",
       "77   Little Portugal, Trinity,Little Portugal, Trin...  \n",
       "78   Brockton, Parkdale Village, Exhibition Place,B...  \n",
       "79   North Park, Maple Leaf Park, Upwood Park,North...  \n",
       "80   Del Ray, Mount Dennis, Keelsdale and Silvertho...  \n",
       "81   Runnymede, The Junction North,Runnymede, The J...  \n",
       "82   High Park, The Junction South,High Park, The J...  \n",
       "83   Parkdale, Roncesvalles,Parkdale, Roncesvalles,...  \n",
       "84   Runnymede, Swansea,Runnymede, Swansea,Runnymed...  \n",
       "85   Queen's Park, Ontario Provincial Government,Qu...  \n",
       "86   Canada Post Gateway Processing Centre,Canada P...  \n",
       "87   Business reply mail Processing Centre, South C...  \n",
       "88   New Toronto, Mimico South, Humber Bay Shores,N...  \n",
       "89   Alderwood, Long Branch,Alderwood, Long Branch,...  \n",
       "90   The Kingsway, Montgomery Road, Old Mill North,...  \n",
       "91   Old Mill South, King's Mill Park, Sunnylea, Hu...  \n",
       "92   Mimico NW, The Queensway West, South of Bloor,...  \n",
       "93   Islington Avenue, Humber Valley Village,Isling...  \n",
       "94   West Deane Park, Princess Gardens, Martin Grov...  \n",
       "95   Eringate, Bloordale Gardens, Old Burnhamthorpe...  \n",
       "96   Humber Summit,Humber Summit,Humber Summit,Humb...  \n",
       "97   Humberlea, Emery,Humberlea, Emery,Humberlea, E...  \n",
       "98                         Weston,Weston,Weston,Weston  \n",
       "99             Westmount,Westmount,Westmount,Westmount  \n",
       "100  Kingsview Village, St. Phillips, Martin Grove ...  \n",
       "101  South Steeles, Silverstone, Humbergate, Jamest...  \n",
       "102  Northwest, West Humber - Clairville,Northwest,...  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_post_group=df_postcode.groupby(['Postcode','Borough'],as_index=False).agg(lambda x:','.join(x))\n",
    "df_post_group"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " For Neighborhood=\"Not assigned\", make the value the same as Borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M1B</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>M1C</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Rouge Hill, Port Union, Highland Creek,Rouge H...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M1E</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Guildwood, Morningside, West Hill,Guildwood, M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>M1G</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Woburn,Woburn,Woburn,Woburn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M1H</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode      Borough                                       Neighborhood\n",
       "0      M1B  Scarborough  Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...\n",
       "1      M1C  Scarborough  Rouge Hill, Port Union, Highland Creek,Rouge H...\n",
       "2      M1E  Scarborough  Guildwood, Morningside, West Hill,Guildwood, M...\n",
       "3      M1G  Scarborough                        Woburn,Woburn,Woburn,Woburn\n",
       "4      M1H  Scarborough            Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for inex,row in df_post_group.iterrows():\n",
    "    if row['Neighborhood']=='Not assigned':\n",
    "        row['Neighborhood']=row['Borough']\n",
    "        \n",
    "df_post_group.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Check if data is match the requiry of question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M5G</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Central Bay Street,Central Bay Street,Central ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>M2H</td>\n",
       "      <td>North York</td>\n",
       "      <td>Hillcrest Village,Hillcrest Village,Hillcrest ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M1B</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>M1J</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Scarborough Village,Scarborough Village,Scarbo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M4M</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>Studio District,Studio District,Studio Distric...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>M1C</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Rouge Hill, Port Union, Highland Creek,Rouge H...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>M1H</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode           Borough  \\\n",
       "0      M5G  Downtown Toronto   \n",
       "1      M2H        North York   \n",
       "2      M1B       Scarborough   \n",
       "3      M1J       Scarborough   \n",
       "4      M4M      East Toronto   \n",
       "5      M1C       Scarborough   \n",
       "6      M1H       Scarborough   \n",
       "\n",
       "                                        Neighborhood  \n",
       "0  Central Bay Street,Central Bay Street,Central ...  \n",
       "1  Hillcrest Village,Hillcrest Village,Hillcrest ...  \n",
       "2  Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...  \n",
       "3  Scarborough Village,Scarborough Village,Scarbo...  \n",
       "4  Studio District,Studio District,Studio Distric...  \n",
       "5  Rouge Hill, Port Union, Highland Creek,Rouge H...  \n",
       "6            Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create new datafram for test\n",
    "columns_name=['Postcode','Borough','Neighborhood']\n",
    "df_test=pd.DataFrame(columns=columns_name)\n",
    "\n",
    "list_test=['M5G','M2H','M1B','M1J','M4M','M1C','M1H']\n",
    "\n",
    "for postcode in list_test:\n",
    "    df_test=df_test.append(df_post_group[df_post_group['Postcode']==postcode],ignore_index=True)\n",
    "    \n",
    "df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(103, 3)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_post_group.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Load the coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...</td>\n",
       "      <td>M1B</td>\n",
       "      <td>43.806686</td>\n",
       "      <td>-79.194353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Rouge Hill, Port Union, Highland Creek,Rouge H...</td>\n",
       "      <td>M1C</td>\n",
       "      <td>43.784535</td>\n",
       "      <td>-79.160497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Guildwood, Morningside, West Hill,Guildwood, M...</td>\n",
       "      <td>M1E</td>\n",
       "      <td>43.763573</td>\n",
       "      <td>-79.188711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Woburn,Woburn,Woburn,Woburn</td>\n",
       "      <td>M1G</td>\n",
       "      <td>43.770992</td>\n",
       "      <td>-79.216917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Scarborough</td>\n",
       "      <td>Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae</td>\n",
       "      <td>M1H</td>\n",
       "      <td>43.773136</td>\n",
       "      <td>-79.239476</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Borough                                       Neighborhood Postcode  \\\n",
       "0  Scarborough  Malvern, Rouge,Malvern, Rouge,Malvern, Rouge,M...      M1B   \n",
       "1  Scarborough  Rouge Hill, Port Union, Highland Creek,Rouge H...      M1C   \n",
       "2  Scarborough  Guildwood, Morningside, West Hill,Guildwood, M...      M1E   \n",
       "3  Scarborough                        Woburn,Woburn,Woburn,Woburn      M1G   \n",
       "4  Scarborough            Cedarbrae,Cedarbrae,Cedarbrae,Cedarbrae      M1H   \n",
       "\n",
       "    Latitude  Longitude  \n",
       "0  43.806686 -79.194353  \n",
       "1  43.784535 -79.160497  \n",
       "2  43.763573 -79.188711  \n",
       "3  43.770992 -79.216917  \n",
       "4  43.773136 -79.239476  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_geo = pd.read_csv('http://cocl.us/Geospatial_data')\n",
    "df_geo.columns = ['Postcode', 'Latitude', 'Longitude']\n",
    "\n",
    "df_po=pd.merge(df_post_group,df_geo,on=['Postcode'],how='inner')\n",
    "df_tor=df_po[['Borough','Neighborhood','Postcode','Latitude','Longitude']].copy()\n",
    "\n",
    "df_tor.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The coordinate of the city of Totonto are43.6534817,-79.3839347.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/arielchien/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: DeprecationWarning: Using Nominatim with the default \"geopy/1.22.0\" `user_agent` is strongly discouraged, as it violates Nominatim's ToS https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please specify a custom `user_agent` with `Nominatim(user_agent=\"my-application\")` or by overriding the default `user_agent`: `geopy.geocoders.options.default_user_agent = \"my-application\"`. In geopy 2.0 this will become an exception.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "address='Toronto, Canada'\n",
    "geolocator=Nominatim()\n",
    "location=geolocator.geocode(address)\n",
    "latitude=location.latitude\n",
    "longitude=location.longitude\n",
    "print('The coordinate of the city of Totonto are{},{}.'.format(latitude,longitude))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1a20e3c8d0>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create map of Toronto using latitude and longitude values\n",
    "map_toronto=folium.Map(location=[latitude,longitude],zoom_start=14)\n",
    "\n",
    "#adding markers to map\n",
    "\n",
    "for lat,lng,borough,neighborhood in zip(df_tor['Latitude'],df_tor['Longitude'],df_tor['Borough'],df_tor['Neighborhood']):\n",
    "    label='{},{}'.format(neighborhood,borough)\n",
    "    label=folium.Popup(label,parse_html=True)\n",
    "    folium.CircleMarker([lat,lng],radius=5,popup=label,color='blue',fill=True,fill_color='#3186cc',fill_opacity=0.6,parse_html=False).add_to(map_toronto)\n",
    "    \n",
    "map_toronto    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
